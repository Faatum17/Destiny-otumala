#include <iostream>
#include <stack>
using namespace std;


#include<iostream>
#include<string.h>
using namespace std;
#define MAX 50
class Stack
{
private:
  char data[MAX],str[MAX];
  int top,length,count;
  void pushData(char);
  char popData();
public:
  Stack()
  {
    top=-1;
    length=0;
    count=0;
  }
  void getString();
  void checkPalindrome();
  void extractString();
  void displayReverse();
};
int main()
{

  Stack obj;
  obj.getString();
  obj.extractString();
  obj.displayReverse();
  obj.checkPalindrome();
  return 0;
}
void Stack::getString()
{
  cout<<"\n Enter a String: ";
  cin.getline(str,MAX);
  length=strlen(str);
}
void Stack::extractString()
{
  char temp[MAX];
  int i,j;
  for(i=0; i<length; i++)
  {
    temp[i]=str[i];
  }
  j=0;
  for(i=0; i<length; i++ )
  {
    if(isalpha(temp[i]))
    {
      str[j]=tolower(temp[i]);
      j++;
    }
  }
}
void Stack::checkPalindrome()
{
  for(int i=0; i<length; i++)
    pushData(str[i]);

  for(int i=0; i<length; i++)
  {
    if(str[i]==popData())
      count++;
  }
  if(count==length)
  {
    cout<<"\n Entered string is a Palindrome. \n";
  }
  else  cout<<"\n Entered string is not a Palindrome. \n";
}
void Stack::displayReverse()
{
  for(int i=length-1; i>=0; i--)
    cout<<str[i];
}
void Stack::pushData(char temp)
{
  if(top==MAX-1)
  {
    cout<<"\n Stack Overflow!!!";
    return;
  }
  top++;
  data[top]=temp;
}
char Stack::popData()
{
  if(top==-1)
  {
    cout<<"\n Stack Underflow!!!";
    char ch='\n';
    return ch;
  }
  char temp=data[top];
  top--;
  return temp;
  return 0;




no 3......................................................................................................................................................................................................................................................
#include <iostream>
#include
struct NODE {
    float data;
    NODE* link;
};

class Stack {
    NODE* top;

public:
    Stack();
    void Push(float value);
    void Pop();
    void Display();
    ~Stack();
};

Stack::Stack() : top(nullptr) {}

void Stack::Push(float value) {
    NODE* newNode = new NODE;
    newNode->data = value;
    newNode->link = top;
    top = newNode;
}

void Stack::Pop() {
    if (top == nullptr) {
        std::cout << "Stack underflow\n";
        return;
    }
    NODE* temp = top;
    top = top->link;
    delete temp;
}

void Stack::Display() {
    NODE* current = top;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->link;
    }
    std::cout << std::endl;
}

Stack::~Stack() {
    while (top != nullptr) {
        NODE* temp = top;
        top = top->link;
        delete temp;
    }
}

int main() {
    Stack myStack;
    myStack.Push(3.14);
    myStack.Push(2.718);
    myStack.Push(1.618);

    std::cout << "Stack contents: ";
    myStack.Display();

    myStack.Pop();

    std::cout << "After Pop: ";
    myStack.Display();

    return 0;
}

